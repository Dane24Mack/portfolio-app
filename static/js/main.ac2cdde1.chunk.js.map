{"version":3,"sources":["watchlist.js","App.js","reportWebVitals.js","index.js"],"names":["watchList","id","completed","description","WatchList","props","watchedItem","itemId","setState","prevState","prevList","itemIndex","findIndex","item","handleKeyPress","event","console","log","key","addItem","prevValue","state","inputRef","current","value","curId","React","createRef","checkRef","filterRef","length","filtered","this","filter","map","ref","type","onChange","defaultChecked","style","textDecoration","undefined","prev","padding","onKeyPress","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac2cdde1.chunk.js","sourcesContent":["import React from 'react'\n\nlet watchList = [\n    {\n       id: 1,\n       completed: true, \n       description: \"The Mandalorian - Season 2\"\n    },\n    {\n       id: 2,\n       completed: false, \n       description: \"Cobra Kai - Season 3\"\n    },\n    {\n       id: 3,\n       completed: false, \n       description: \"Chaos Walking\"\n    },\n    {\n       id: 4,\n       completed: true, \n       description: \"Love and Monsters\"\n    },\n    {\n       id: 5,\n       completed: false, \n       description: \"WandaVision - Season 1\"\n    },\n    {\n       id: 6,\n       completed: true, \n       description: \"Avatar: The Last Airbender - Season 2\"\n    },\n    {\n       id: 7,\n       completed: false, \n       description: \"Star Wars Rebels - Season 1\"\n    },\n    {\n       id: 8,\n       completed: true, \n       description: \"Ant-Man and the Wasp\"\n    },\n    {\n       id: 9,\n       completed: true, \n       description: \"Jurassic World\"\n    },\n    {\n       id: 10,\n       completed: true, \n       description: \"The Goonies\"\n    },\n ]\n \n export default class WatchList extends React.Component {\n    constructor(props) {\n       super(props)\n       let inputRef = React.createRef()\n       let checkRef = React.createRef()\n       let filterRef = React.createRef()\n       this.state = {watchList, curId: watchList.length+1, inputRef, checkRef, filterRef, filtered: false}\n    }\n    watchedItem = (itemId) => {\n       this.setState((prevState) => {\n          let prevList = [...prevState.watchList]\n          let itemIndex = prevList.findIndex((item) => item.id == itemId)\n          prevList[itemIndex] = {...prevList[itemIndex], completed: !prevList[itemIndex].completed,}\n          return {watchList: [...prevList]}\n       })\n    }\n    handleKeyPress = (event) => {\n       console.log(\"Pressed\")\n       console.log(event.key)\n       if (event.key == \"Enter\") {\n          this.addItem()\n       }\n    }\n    addItem = () => {\n       let prevValue = this.state.inputRef.current.value\n       this.setState(prevState=>({\n          watchList: [...prevState.watchList,\n             {completed: false, description: prevValue, id: prevState.curId}],\n          curId: prevState.curId+1\n       }))\n       this.state.inputRef.current.value = \"\"\n\n       \n       //this.state.inputRef.current.value == \"\"\n    }\n    render() {\n       let watchList = this.state.watchList\n       if (this.state.filtered) {\n          watchList = watchList.filter(item=>!item.completed)\n       }\n         watchList = watchList.map((item) => (\n          <div key={item.id}>\n             <label>\n                <input ref={this.state.checkRef} type= \"checkbox\" onChange={() => this.watchedItem(item.id)} defaultChecked={item.completed}></input>\n                <span style={item.completed ? {textDecoration: \"line-through\"} : undefined}>{item.description}</span>\n             </label>\n          </div>\n         ))\n       return ( \n       <>\n          <h1>To Watch List - Film &amp; TV</h1>\n             <label>\n                <input ref={this.state.filterRef} type= \"checkbox\" onChange={() => this.setState((prev) => ({filtered: !prev.filtered}))} defaultChecked={false}></input>\n                Filter By Watch Status\n             </label>\n                <hr></hr>\n          <div style={{padding: \"5px\"}}>\n             {watchList}\n          </div>\n                <hr></hr>\n             <input onKeyPress={(event) => this.handleKeyPress(event)} ref={this.state.inputRef}></input>\n             <button onClick={() => this.addItem()}>Add New Item</button>\n       </>\n       )\n    }\n }\n\n ","import './App.css';\nimport Watchlist from './watchlist.js';\n\n\nfunction App() {\n  return (\n      <Watchlist></Watchlist>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}